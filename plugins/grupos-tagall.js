const handler = async (m, { isOwner, isAdmin, conn, text, participants, args, command }) => {
  let chat = global.db.data.chats[m.chat];

  // Verificaci√≥n de permisos
  if (!(isAdmin || isOwner)) {
    global.dfail('admin', m, conn);
    throw false;
  }

  if (command === 'emotag') {
    // Configurar emoji o bandera
    const selectedEmoji = args[0] || 'üêºü§ç'; // Emoji predeterminado si no se especifica
    chat.emojiTag = selectedEmoji; // Guardar selecci√≥n en la base de datos
    await conn.sendMessage(m.chat, { 
      text: `Emoji de menci√≥n actualizado a: ${selectedEmoji}` 
    });
    return;
  }

  // Configuraci√≥n del emoji o bandera por defecto
  const emoji = chat.emojiTag || 'üêºü§ç';

  // Mapeo manual de prefijos de n√∫meros a banderas (ISO 3166-1)
  const countryFlags = {
    '52': 'üá≤üáΩ', // M√©xico
    '57': 'üá®üá¥', // Colombia
    '54': 'üá¶üá∑', // Argentina
    '34': 'üá™üá∏', // Espa√±a
    '55': 'üáßüá∑', // Brasil
    '1':  'üá∫üá∏', // Estados Unidos
    '44': 'üá¨üáß', // Reino Unido
    '91': 'üáÆüá≥', // India
    '502': 'üá¨üáπ', // Guatemala
    '56': 'üá®üá±', // Chile
    '51': 'üáµüá™', // Per√∫
    '58': 'üáªüá™', // Venezuela
    '505': 'üá≥üáÆ', // Nicaragua
    '593': 'üá™üá®', // Ecuador
    '504': 'üá≠üá≥', // Honduras
    '591': 'üáßüá¥', // Bolivia
    '53': 'üá®üá∫', // Cuba
    '503': 'üá∏üáª', // El Salvador
    '507': 'üáµüá¶', // Panam√°
    '595': 'üáµüáæ', // Paraguay
  };

  // Funci√≥n para obtener la bandera seg√∫n el c√≥digo de pa√≠s
  const getCountryFlag = (id) => {
    const phoneNumber = id.split('@')[0];
    const prefixes = [3, 2, 1]; // Prioridad de longitud de prefijo

    for (const length of prefixes) {
      const phonePrefix = phoneNumber.slice(0, length);
      if (countryFlags[phonePrefix]) return countryFlags[phonePrefix];
    }

    return 'üéå'; // Predeterminado
  };

  // Obtener mensaje adicional y grupo
  const pesan = args.join` `;
  const groupMetadata = await conn.groupMetadata(m.chat);
  const groupName = groupMetadata.subject;

  // Construir mensaje
  let teks = `*${groupName}*\n\n`;
  teks += `*·¥ç…™·¥á·¥ç ô Ä·¥ès : ${participants.length}*\n`;
  teks += `*·¥ç·¥á…¥s·¥Ä·¥ä·¥á:${pesan}*\n\n‚îå‚úß‚ó¶ *ùêåùêÑùêçùêÇùêàùêéùêç ùêÜùêÑùêçùêÑùêëùêÄùêã* ‚ó¶‚úß\n`;

  for (const mem of participants) {
    const flagOrEmoji = emoji === 'üèÅ' ? getCountryFlag(mem.id) : emoji; // Usar banderas si el emoji es üèÅ
    teks += `‚ïé${flagOrEmoji} @${mem.id.split('@')[0]}\n`;
  }

  teks += `‚ï∞‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚úß‚ó¶‚ôö‚ó¶‚úß‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ãÜ\n\n> ${dev}`;

  // Enviar mensaje con menciones
  await conn.sendMessage(m.chat, { 
    text: teks,
    mentions: participants.map((a) => a.id)
  });
};

handler.help = ['todos', 'emotag'];
handler.tags = ['group'];
handler.command = /^(tagall|invocar|marcar|todos|invocaci√≥n|emotag|t|T)$/i;
handler.admin = true;
handler.group = true;

export default handler;